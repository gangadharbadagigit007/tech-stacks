1)What is Git?
  --> Version Control System
  --> To maintain changes in the file we need to have versions
  --> To track changes in files / folders
  --> To collaborate with teams
  --> It is distributed VCS
  
  Version Control Systems
  1) Centralized VCS
  2) Distributed VCS
2)What is GitHub?
   --> Website to upload repositories online
   --> Provides the backup for our repositories
   --> Provides visual interface to our repositories
   --> It makes collaboration easier
3)Relation between git and github
---> Git is not related to GitHub
4)A simple Workflow

Commands
 git --version --> To get git version
 git init --> To make our project/folder git specific // initialize to track changes
 git status --> to check any new files added or any changes on file
 git add <file>  --> add file 
 git commit -m "message for that commit" --> Commiting the files to local repository
 //Setting logging credentials
 git config --global user.email "gangadharbadagigit007@gmail.com"
 git config --global user.name "gangadharbadagigit007"
 
 Adding to remote repository
 git remote add origin https://github.com/gangadharbadagigit007/tech-stacks.git
 
 No push local repository to remote
 git push -u origin master
 
 Branching and Merging
 git branch <branch_name> --> To create a branch
 git checkout branch_name  --> To switch the branch 
 git merge <branch_name> --> To merge branch with master 
 git branch -d <branch_name> --> delete branch from local 
 git push origin --delete  <branch_name> --> delete branch from remote 
 
 Tags
 --> Used to mark release points
 --> To track commits based on points
 
 steps
   git checkout <branch_name>
   git tag <tag_name> --> To create a tag 
   git tag -l "v1.*" --> To display all tags with name v1.
   git show <tag_name> --> to show tag information
   git push origin <tag_name>  --> To push tags to remote 
   git tag -d <tag_name>  --> To delete tag
   git tag --delete <tag_name> --> To delete tag
   git push origin -d <tag_name> --> To delete tag from remote
   
   
   Merge vs Rebase
   git merge
    --> it is non -destructive operation
	--> Existing branches are not changed in any way
	--> Creates a new merge commit in the feature branch
	
   git rebase
     --> moves the entire feature branch to begin on the tip of the master branch
	 --> Rewrites the project history
	 --> We get much cleaner and linear project history